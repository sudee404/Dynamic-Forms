[
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "UserAdmin",
        "importPath": "django.contrib.auth.admin",
        "description": "django.contrib.auth.admin",
        "isExtraImport": true,
        "detail": "django.contrib.auth.admin",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "BaseBackend",
        "importPath": "django.contrib.auth.backends",
        "description": "django.contrib.auth.backends",
        "isExtraImport": true,
        "detail": "django.contrib.auth.backends",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "SetPasswordForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "password_validation",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "login",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "logout",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "BaseUserManager",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "AbstractBaseUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "Group",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "Permission",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse_lazy",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "PasswordResetDoneView",
        "importPath": "django.contrib.auth.views",
        "description": "django.contrib.auth.views",
        "isExtraImport": true,
        "detail": "django.contrib.auth.views",
        "documentation": {}
    },
    {
        "label": "PasswordResetConfirmView",
        "importPath": "django.contrib.auth.views",
        "description": "django.contrib.auth.views",
        "isExtraImport": true,
        "detail": "django.contrib.auth.views",
        "documentation": {}
    },
    {
        "label": "PasswordResetCompleteView",
        "importPath": "django.contrib.auth.views",
        "description": "django.contrib.auth.views",
        "isExtraImport": true,
        "detail": "django.contrib.auth.views",
        "documentation": {}
    },
    {
        "label": "PasswordResetView",
        "importPath": "django.contrib.auth.views",
        "description": "django.contrib.auth.views",
        "isExtraImport": true,
        "detail": "django.contrib.auth.views",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "MyUser",
        "importPath": "accounts.models",
        "description": "accounts.models",
        "isExtraImport": true,
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "Department",
        "importPath": "accounts.models",
        "description": "accounts.models",
        "isExtraImport": true,
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "LoginRequiredMixin",
        "importPath": "django.contrib.auth.mixins",
        "description": "django.contrib.auth.mixins",
        "isExtraImport": true,
        "detail": "django.contrib.auth.mixins",
        "documentation": {}
    },
    {
        "label": "CreateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "DetailView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "UpdateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "DeleteView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "ListView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "accounts.migrations.0001_initial",
        "description": "accounts.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('auth', '0012_alter_user_first_name_max_length'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='MyUser',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "accounts.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "accounts.migrations.0002_myuser_image_myuser_phone",
        "description": "accounts.migrations.0002_myuser_image_myuser_phone",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('accounts', '0001_initial'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='myuser',\n            name='image',\n            field=models.ImageField(null=True, upload_to='images/'),\n        ),",
        "detail": "accounts.migrations.0002_myuser_image_myuser_phone",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "accounts.migrations.0003_department_workarrangement_myuser_department_and_more",
        "description": "accounts.migrations.0003_department_workarrangement_myuser_department_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('accounts', '0002_myuser_image_myuser_phone'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Department',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=50)),",
        "detail": "accounts.migrations.0003_department_workarrangement_myuser_department_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "accounts.migrations.0004_alter_myuser_arrangement_delete_workarrangement",
        "description": "accounts.migrations.0004_alter_myuser_arrangement_delete_workarrangement",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('accounts', '0003_department_workarrangement_myuser_department_and_more'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='myuser',\n            name='arrangement',\n            field=models.CharField(choices=[('Full-Time', 'full-time'), ('Intern', 'intern'), ('Attachee', 'attachee')], default='Full-Time', max_length=50),\n        ),",
        "detail": "accounts.migrations.0004_alter_myuser_arrangement_delete_workarrangement",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "accounts.migrations.0005_alter_myuser_arrangement",
        "description": "accounts.migrations.0005_alter_myuser_arrangement",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('accounts', '0004_alter_myuser_arrangement_delete_workarrangement'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='myuser',\n            name='arrangement',\n            field=models.CharField(choices=[('full-time', 'Full-time'), ('intern', 'Intern'), ('attachee', 'Attachee')], default='full-time', max_length=50),\n        ),",
        "detail": "accounts.migrations.0005_alter_myuser_arrangement",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "accounts.migrations.0006_alter_myuser_username",
        "description": "accounts.migrations.0006_alter_myuser_username",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('accounts', '0005_alter_myuser_arrangement'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='myuser',\n            name='username',\n            field=models.CharField(max_length=30, null=True),\n        ),",
        "detail": "accounts.migrations.0006_alter_myuser_username",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "accounts.migrations.0007_rename_is_hr_myuser_is_manager",
        "description": "accounts.migrations.0007_rename_is_hr_myuser_is_manager",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('accounts', '0006_alter_myuser_username'),\n    ]\n    operations = [\n        migrations.RenameField(\n            model_name='myuser',\n            old_name='is_hr',\n            new_name='is_manager',\n        ),",
        "detail": "accounts.migrations.0007_rename_is_hr_myuser_is_manager",
        "documentation": {}
    },
    {
        "label": "MyUserAdmin",
        "kind": 6,
        "importPath": "accounts.admin",
        "description": "accounts.admin",
        "peekOfCode": "class MyUserAdmin(UserAdmin):\n    fieldsets = (\n        (None, {'fields': ('email', 'password')}),\n        ('Personal info', {'fields': ('first_name', 'last_name','username','dob')}),\n        ('Permissions', {'fields': ('is_active', 'is_staff', 'is_superuser')}),\n    )\n    add_fieldsets = (\n        (None, {\n            'classes': ('wide',),\n            'fields': ('email', 'first_name', 'last_name', 'password1', 'password2'),",
        "detail": "accounts.admin",
        "documentation": {}
    },
    {
        "label": "AccountsConfig",
        "kind": 6,
        "importPath": "accounts.apps",
        "description": "accounts.apps",
        "peekOfCode": "class AccountsConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'accounts'",
        "detail": "accounts.apps",
        "documentation": {}
    },
    {
        "label": "MyUserBackend",
        "kind": 6,
        "importPath": "accounts.backends",
        "description": "accounts.backends",
        "peekOfCode": "class MyUserBackend(BaseBackend):\n    backend = 'myuserbackend'\n    def authenticate(self, request, email=None, password=None, **kwargs):\n        try:\n            user = MyUser.objects.get(email=email)\n        except MyUser.DoesNotExist:\n            return None\n        if user.check_password(password):\n            return user\n    def get_user(self, user_id):",
        "detail": "accounts.backends",
        "documentation": {}
    },
    {
        "label": "LoginForm",
        "kind": 6,
        "importPath": "accounts.forms",
        "description": "accounts.forms",
        "peekOfCode": "class LoginForm(forms.Form):\n    # Login form for handling user login\n    email = forms.EmailField()\n    password = forms.CharField(widget=forms.PasswordInput)\nclass RegisterForm(forms.ModelForm):\n    # User registration form with password validation\n    password = forms.CharField(widget=forms.PasswordInput)\n    password2 = forms.CharField(widget=forms.PasswordInput)\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)",
        "detail": "accounts.forms",
        "documentation": {}
    },
    {
        "label": "RegisterForm",
        "kind": 6,
        "importPath": "accounts.forms",
        "description": "accounts.forms",
        "peekOfCode": "class RegisterForm(forms.ModelForm):\n    # User registration form with password validation\n    password = forms.CharField(widget=forms.PasswordInput)\n    password2 = forms.CharField(widget=forms.PasswordInput)\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n    class Meta:\n        model = MyUser\n        fields = ('email', 'username')\n    def clean_password2(self):",
        "detail": "accounts.forms",
        "documentation": {}
    },
    {
        "label": "CustomSetPasswordForm",
        "kind": 6,
        "importPath": "accounts.forms",
        "description": "accounts.forms",
        "peekOfCode": "class CustomSetPasswordForm(SetPasswordForm):\n    \"\"\"\n    A form that lets a user change set their password without entering the old\n    password\n    \"\"\"\n    error_messages = {\n        'password_mismatch': _(\"The two password fields didn't match.\"),\n        'password_notvalid': _(\"Password must of 8 Character which contain alphanumeric with atleast 1 special charater and 1 uppercase.\"),\n    }\n    new_password1 = forms.CharField(",
        "detail": "accounts.forms",
        "documentation": {}
    },
    {
        "label": "UpdateProfileForm",
        "kind": 6,
        "importPath": "accounts.forms",
        "description": "accounts.forms",
        "peekOfCode": "class UpdateProfileForm(forms.ModelForm):\n    \"\"\"\n    A form for updating user profiles.\n    \"\"\"\n    class Meta:\n        model = MyUser\n        fields = ['first_name', 'last_name', 'username', 'email',\n                  'dob', 'phone', 'image', 'department', 'arrangement']\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)",
        "detail": "accounts.forms",
        "documentation": {}
    },
    {
        "label": "MyUserManager",
        "kind": 6,
        "importPath": "accounts.models",
        "description": "accounts.models",
        "peekOfCode": "class MyUserManager(BaseUserManager):\n    def create_user(self, email, password=None, **extra_fields):\n        \"\"\"\n        Creates and saves a User with the given email, and password.\n        \"\"\"\n        if not email:\n            raise ValueError('The Email must be set')\n        email = self.normalize_email(email)\n        user = self.model(email=email, **extra_fields)\n        user.set_password(password)",
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "Department",
        "kind": 6,
        "importPath": "accounts.models",
        "description": "accounts.models",
        "peekOfCode": "class Department(models.Model):\n    name = models.CharField(max_length=50)\n    description = models.TextField()\n    def __str__(self):\n        return self.name\n    class Meta:\n        verbose_name = 'Department'\n        verbose_name_plural = 'Departments'\n    def get_absolute_url(self):\n        return reverse(\"department_detail\", kwargs={\"pk\": self.pk})",
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "MyUser",
        "kind": 6,
        "importPath": "accounts.models",
        "description": "accounts.models",
        "peekOfCode": "class MyUser(AbstractBaseUser):\n    # This is a custom user model\n    STATUS_CHOICES = [\n        ('full-time', 'Full-time'),\n        ('intern', 'Intern'),\n        ('attachee', 'Attachee'),\n    ]\n    first_name = models.CharField(max_length=30,null=True)\n    last_name = models.CharField(max_length=30,null=True)\n    username = models.CharField(max_length=30,null=True)",
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "accounts.urls",
        "description": "accounts.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"login/\", login_view, name='login'),  # User login\n    path(\"registration/\", register_view, name=\"register\"),\n    path(\"logout/\", logout_view, name=\"logout\"),\n    path('password_reset/', MyPasswordResetView.as_view(),name='password_reset'),\n    path('password_reset_done/', MyPasswordResetDoneView.as_view(),name='password_reset_done'),\n    path('reset/<uidb64>/<token>/', MyPasswordResetConfirmView.as_view(),name='password_reset_confirm'),\n    path('reset/done/', MyPasswordResetCompleteView.as_view(),name='password_reset_complete'),\n    path('', profile, name='profile'),\n    path('users/', users, name='users'),",
        "detail": "accounts.urls",
        "documentation": {}
    },
    {
        "label": "DepartmentListView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class DepartmentListView(LoginRequiredMixin, ListView):\n    model = Department\n    template_name = 'department/department_list.html'\n    context_object_name = 'departments'\nclass DepartmentCreateView(LoginRequiredMixin, CreateView):\n    model = Department\n    fields = ['name', 'description']\n    template_name = 'department/new_department.html'\n    success_url = reverse_lazy('departments')\nclass DepartmentUpdateView(LoginRequiredMixin, UpdateView):",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "DepartmentCreateView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class DepartmentCreateView(LoginRequiredMixin, CreateView):\n    model = Department\n    fields = ['name', 'description']\n    template_name = 'department/new_department.html'\n    success_url = reverse_lazy('departments')\nclass DepartmentUpdateView(LoginRequiredMixin, UpdateView):\n    model = Department\n    fields = ['name', 'description']\n    template_name = 'department/new_department.html'\n    def get_success_url(self):",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "DepartmentUpdateView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class DepartmentUpdateView(LoginRequiredMixin, UpdateView):\n    model = Department\n    fields = ['name', 'description']\n    template_name = 'department/new_department.html'\n    def get_success_url(self):\n        return self.object.get_absolute_url()\nclass DepartmentDetailView(LoginRequiredMixin, DetailView):\n    model = Department\n    template_name = 'department/department_detail.html'\nclass UsersCreateView(LoginRequiredMixin, CreateView):",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "DepartmentDetailView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class DepartmentDetailView(LoginRequiredMixin, DetailView):\n    model = Department\n    template_name = 'department/department_detail.html'\nclass UsersCreateView(LoginRequiredMixin, CreateView):\n    model = MyUser\n    fields = ['first_name', 'last_name', 'username', 'email',\n              'password', 'department', 'image', 'arrangement']\n    template_name = 'new_user.html'\n    success_url = reverse_lazy('users')\n    def form_valid(self, form):",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "UsersCreateView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class UsersCreateView(LoginRequiredMixin, CreateView):\n    model = MyUser\n    fields = ['first_name', 'last_name', 'username', 'email',\n              'password', 'department', 'image', 'arrangement']\n    template_name = 'new_user.html'\n    success_url = reverse_lazy('users')\n    def form_valid(self, form):\n        form.instance.set_password(self.request.POST.get('password'))\n        role = self.request.POST.get('role')\n        if role == 'hr':",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "UsersUpdateView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class UsersUpdateView(LoginRequiredMixin, UpdateView):\n    model = MyUser\n    fields = ['first_name', 'last_name', 'username', 'email',\n              'password', 'department', 'image', 'arrangement']\n    template_name = 'new_user.html'\n    success_url = reverse_lazy('users')\n    def form_valid(self, form):\n        role = self.request.POST.get('role')\n        if role == 'manager':\n            form.instance.is_staff = False",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "UsersDetailView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class UsersDetailView(LoginRequiredMixin, DetailView):\n    model = MyUser\n    template_name = 'user_detail.html'\n# user delete\nclass UsersDeleteView(LoginRequiredMixin, DeleteView):\n    model = MyUser\n    template_name = 'user_delete.html'\n    success_url = reverse_lazy('users')\nclass MyPasswordResetView(PasswordResetView):\n    template_name = 'my_password_reset_form.html'",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "UsersDeleteView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class UsersDeleteView(LoginRequiredMixin, DeleteView):\n    model = MyUser\n    template_name = 'user_delete.html'\n    success_url = reverse_lazy('users')\nclass MyPasswordResetView(PasswordResetView):\n    template_name = 'my_password_reset_form.html'\n    email_template_name = 'my_password_reset_email.html'\n    success_url = reverse_lazy('password_reset_done')\n    def form_valid(self, form):\n        email = form.cleaned_data['email']",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "MyPasswordResetView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class MyPasswordResetView(PasswordResetView):\n    template_name = 'my_password_reset_form.html'\n    email_template_name = 'my_password_reset_email.html'\n    success_url = reverse_lazy('password_reset_done')\n    def form_valid(self, form):\n        email = form.cleaned_data['email']\n        try:\n            user = MyUser.objects.get(email=email)\n            return super().form_valid(form)\n        except MyUser.DoesNotExist:",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "MyPasswordResetDoneView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class MyPasswordResetDoneView(PasswordResetDoneView):\n    template_name = 'my_password_reset_done.html'\nclass MyPasswordResetConfirmView(PasswordResetConfirmView):\n    template_name = 'my_password_reset_confirm.html'\n    form_class = CustomSetPasswordForm\n    success_url = reverse_lazy('password_reset_complete')\n    post_reset_login = True\n    def form_valid(self, form):\n        print(\"valid\")\n        form.save()",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "MyPasswordResetConfirmView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class MyPasswordResetConfirmView(PasswordResetConfirmView):\n    template_name = 'my_password_reset_confirm.html'\n    form_class = CustomSetPasswordForm\n    success_url = reverse_lazy('password_reset_complete')\n    post_reset_login = True\n    def form_valid(self, form):\n        print(\"valid\")\n        form.save()\n        return super().form_valid(form)\nclass MyPasswordResetCompleteView(PasswordResetCompleteView):",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "MyPasswordResetCompleteView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class MyPasswordResetCompleteView(PasswordResetCompleteView):\n    template_name = 'my_password_reset_complete.html'",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "register_view",
        "kind": 2,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "def register_view(request):\n    \"\"\"\n    Handles user registration.\n    On GET request, it renders the registration template.\n    On POST request, it validates the form data, creates a new user and logs them in.\n    If the form is not valid, it returns a JSON response with the status 'error' and the form errors.\n    On successful registration, it returns a JSON response with the status 'success'.\n    \"\"\"\n    next_url = request.GET.get('next', '/')\n    if request.method == 'POST':",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "login_view",
        "kind": 2,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "def login_view(request):\n    \"\"\"\n    Handles user login.\n    On GET request, it renders the login template.\n    On POST request, it validates the form data and logs them in.\n    If the form is not valid, it returns a JSON response with the status 'error' and the form errors.\n    On successful login, it returns a JSON response with the status 'success'.\n    \"\"\"\n    next_url = request.GET.get('next', '/')\n    if request.method == 'POST':",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "logout_view",
        "kind": 2,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "def logout_view(request):\n    if request.user.is_authenticated:\n        logout(request)\n    return redirect('home')\ndef profile(request):\n    departments = Department.objects.all()\n    if request.method == 'POST':\n        form = UpdateProfileForm(request.POST, request.FILES, instance=request.user)\n        if form.is_valid():\n            form.save()",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "def profile(request):\n    departments = Department.objects.all()\n    if request.method == 'POST':\n        form = UpdateProfileForm(request.POST, request.FILES, instance=request.user)\n        if form.is_valid():\n            form.save()\n            messages.success(request, 'Your profile was successfully updated!')\n            return redirect('profile')\n        else:\n            messages.error(request, 'Please correct the error below.')",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "users",
        "kind": 2,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "def users(request):\n    context = {}\n    context['users'] = MyUser.objects.exclude(id=request.user.id)\n    return render(request, 'users.html', context)\n# department create and update view\nclass DepartmentListView(LoginRequiredMixin, ListView):\n    model = Department\n    template_name = 'department/department_list.html'\n    context_object_name = 'departments'\nclass DepartmentCreateView(LoginRequiredMixin, CreateView):",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "core.asgi",
        "description": "core.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "core.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-kmc$fdx0jm7ewbcmk6+ab(xd+c7i4*k5z80)9u@9_85=tae)w#'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "SECRET_KEY = 'django-insecure-kmc$fdx0jm7ewbcmk6+ab(xd+c7i4*k5z80)9u@9_85=tae)w#'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "ALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'accounts',",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'accounts',\n    'forms'\n]",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'core.urls'",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "ROOT_URLCONF = 'core.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "WSGI_APPLICATION = 'core.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/5.1/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation\n# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_USER_MODEL",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "AUTH_USER_MODEL = 'accounts.MyUser'\nAUTHENTICATION_BACKENDS = [\n    'accounts.backends.MyUserBackend',\n    'django.contrib.auth.backends.ModelBackend',\n]\n# Internationalization\n# https://docs.djangoproject.com/en/5.1/topics/i18n/\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "AUTHENTICATION_BACKENDS",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "AUTHENTICATION_BACKENDS = [\n    'accounts.backends.MyUserBackend',\n    'django.contrib.auth.backends.ModelBackend',\n]\n# Internationalization\n# https://docs.djangoproject.com/en/5.1/topics/i18n/\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = 'static/'\nMEDIA_URL = 'media/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = 'static/'\nMEDIA_URL = 'media/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\nSTATICFILES_DIRS = [",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = 'static/'\nMEDIA_URL = 'media/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'accounts'),",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = 'static/'\nMEDIA_URL = 'media/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'accounts'),\n]",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "STATIC_URL = 'static/'\nMEDIA_URL = 'media/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'accounts'),\n]\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "MEDIA_URL = 'media/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'accounts'),\n]\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'accounts'),\n]\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "MEDIA_ROOT = os.path.join(BASE_DIR, 'media')\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'accounts'),\n]\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "STATICFILES_DIRS",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "STATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'accounts'),\n]\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "core.urls",
        "description": "core.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('forms.urls')),\n    path('accounts/', include('accounts.urls')),\n]",
        "detail": "core.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "core.wsgi",
        "description": "core.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "core.wsgi",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "forms.migrations.0001_initial",
        "description": "forms.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='DynamicForm',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=255)),",
        "detail": "forms.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "FormsConfig",
        "kind": 6,
        "importPath": "forms.apps",
        "description": "forms.apps",
        "peekOfCode": "class FormsConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'forms'",
        "detail": "forms.apps",
        "documentation": {}
    },
    {
        "label": "create_dynamic_form",
        "kind": 2,
        "importPath": "forms.forms",
        "description": "forms.forms",
        "peekOfCode": "def create_dynamic_form(form_id):\n    dynamic_form = DynamicForm.objects.get(id=form_id)\n    categories = dynamic_form.categories.all()\n    # Create a dictionary to hold form fields\n    form_fields = {}\n    for category in categories:\n        fields = category.fields.all()\n        for field in fields:\n            if field.field_type == 'text':\n                form_fields[field.label] = forms.CharField(",
        "detail": "forms.forms",
        "documentation": {}
    },
    {
        "label": "DynamicForm",
        "kind": 6,
        "importPath": "forms.models",
        "description": "forms.models",
        "peekOfCode": "class DynamicForm(models.Model):\n    name = models.CharField(max_length=255)\n    description = models.TextField(blank=True, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    def __str__(self):\n        return self.name\n# Model to represent Field Categories\nclass FieldCategory(models.Model):\n    form = models.ForeignKey(DynamicForm, on_delete=models.CASCADE, related_name='categories')\n    name = models.CharField(max_length=255)",
        "detail": "forms.models",
        "documentation": {}
    },
    {
        "label": "FieldCategory",
        "kind": 6,
        "importPath": "forms.models",
        "description": "forms.models",
        "peekOfCode": "class FieldCategory(models.Model):\n    form = models.ForeignKey(DynamicForm, on_delete=models.CASCADE, related_name='categories')\n    name = models.CharField(max_length=255)\n    def __str__(self):\n        return self.name\n# Model to represent each Form Field\nclass FormField(models.Model):\n    FIELD_TYPES = [\n        ('text', 'Text'),\n        ('textarea', 'Textarea'),",
        "detail": "forms.models",
        "documentation": {}
    },
    {
        "label": "FormField",
        "kind": 6,
        "importPath": "forms.models",
        "description": "forms.models",
        "peekOfCode": "class FormField(models.Model):\n    FIELD_TYPES = [\n        ('text', 'Text'),\n        ('textarea', 'Textarea'),\n        ('number', 'Number'),\n        ('email', 'Email'),\n        ('date', 'Date'),\n        ('select', 'Select'),\n        ('checkbox', 'Checkbox'),\n    ]",
        "detail": "forms.models",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "forms.urls",
        "description": "forms.urls",
        "peekOfCode": "urlpatterns = [\n]\nurlpatterns = [\n    path('form/<int:form_id>/', dynamic_form_view, name='dynamic_form_view'),\n]",
        "detail": "forms.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "forms.urls",
        "description": "forms.urls",
        "peekOfCode": "urlpatterns = [\n    path('form/<int:form_id>/', dynamic_form_view, name='dynamic_form_view'),\n]",
        "detail": "forms.urls",
        "documentation": {}
    },
    {
        "label": "dynamic_form_view",
        "kind": 2,
        "importPath": "forms.views",
        "description": "forms.views",
        "peekOfCode": "def dynamic_form_view(request, form_id):\n    dynamic_form = get_object_or_404(DynamicForm, id=form_id)\n    categories = dynamic_form.categories.all()\n    FormClass = create_dynamic_form(form_id)\n    if request.method == 'POST':\n        form = FormClass(request.POST)\n        if form.is_valid():\n            # Handle form submission (e.g., save the data or send an email)\n            return HttpResponse(\"Form submitted successfully!\")\n    else:",
        "detail": "forms.views",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    }
]